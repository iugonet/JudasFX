<?xml version="1.0" encoding="utf-8" ?>
<project name="JudasFX" default="all" basedir=".">
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="/usr/share/java/ant/ant-contrib.jar" />
    </classpath>
  </taskdef>

  <property environment="env" />
  <property file="build.properties" />

  <property name="plugins.dir" location="plugins" />
  <property name="lib.dir" location="lib" />
  <property name="javadoc.dir" location="docs" />

  <!-- -->

  <target name="all" depends="clean, init, key, maven, lib, switch_jdk, final_message" description="Install all" />
  
  <target name="cleanAll" depends="clean">
    <if>
      <available file="${tmp}" type="dir" />
      <then>
        <delete dir="${tmp}" />
      </then>
    </if>
  </target>

  <target name="clean" description="Clean up">
    <!--
    <subant target="clean">
      <fileset file="workspace/Aplot/build.xml" />
      <fileset file="workspace/Tplot/build.xml" />
      <fileset file="workspace/Iplot/build.xml" />
      <fileset file="workspace/Mplot/build.xml" />
      <fileset file="workspace/XYplot/build.xml" />
      <fileset file="workspace/JnlpGenerator/build.xml" />
      <fileset file="workspace/Plugins/build.xml" />
      <fileset file="workspace/JudasFX/build.xml" />
    </subant>
    -->
    <if>
      <available file="${plugins.dir}" type="dir" />
      <then>
        <delete dir="${plugins.dir}" />
      </then>
    </if>
    <if>
      <available file="${lib.dir}" type="dir" />
      <then>
        <delete dir="${lib.dir}" />
      </then>
    </if>
    <if>
      <available file="${javadoc.dir}" type="dir" />
      <then>
        <delete dir="${javadoc.dir}" />
      </then>
    </if>
  </target>

  <target name="jar" description="Generate jar files">
    <subant target="jar">
      <fileset file="workspace/Aplot/build.xml" />
      <fileset file="workspace/Tplot/build.xml" />
      <fileset file="workspace/Iplot/build.xml" />
      <fileset file="workspace/Mplot/build.xml" />
      <fileset file="workspace/XYplot/build.xml" />
      <fileset file="workspace/JnlpGenerator/build.xml" />
      <fileset file="workspace/Plugins/build.xml" />
      <fileset file="workspace/JudasFX/build.xml" />
    </subant>
  </target>

  <target name="init" description="Initialize">
    <antcall target="mkdir.tmp" />
    <mkdir dir="${ext.dir}" />
    <antcall target="initial_message" />
  </target>

  <target name="initial_message" description="Display initial message">
    <echo message="###&#x0A;###&#x0A;This installation process takes 11 minutes at least.&#x0A;###&#x0A;###&#x0A;" />
  </target>
  
  <target name="eclipse" description="Install eclipse">
    <get src="${src_eclipse}" dest="${dst_eclipse}" usetimestamp="yes" />
    <!-- To stay away to use untar task because untar task for ant 1.7.1 is buggy. -->
    <exec executable="tar" dir="${tmp}">
      <arg value="xzf" />
      <arg value="${dst_eclipse}" />
      <arg value="--directory" />
      <arg value="${env.HOME}/Documents" />
    </exec>
    <echo message="&#x0A;###&#x0A;###&#x0A;&#x0A;Please type&#x0A;&#x0A;~/eclipse.sh&#x0A;&#x0A;###&#x0A;###&#x0A;" />
    <!-- -->
    <echo message="#!/bin/env bash&#x0A;" file="${env.HOME}/eclipse.sh" />
    <echo message="${env.HOME}/Documents/eclipse/eclipse -data ${judasfx.HOME}/workspace" file="${env.HOME}/eclipse.sh" append="yes" />
    <chmod file="${env.HOME}/eclipse.sh" perm="+x" />
  </target>

  <target name="key" description="Create Security Key">
    <mkdir dir="key" />
    <exec executable="keytool">
      <arg line="-genkey -alias iugonet -keystore ${judasfx.HOME}/key/keystore -storepass password -keypass password -dname &quot;CN=localhost, OU=IUGONET Project, O=IUGONET project, L=Sakyo-ku, ST=Kyoto, C=JP&quot; -validity 730" />
    </exec>
    <exec executable="keytool">
      <arg line="-list -v -keystore ${judasfx.HOME}/key/keystore -storepass password" />
    </exec>
  </target>

  <target name="lib" description="Install some jar files as external library">
    <antcall target="mkdir.tmp" />
    <antcall target="maven" />

    <!-- -->
    <get src="${src_geotools}" dest="${dst_geotools}" usetimestamp="yes" />
    <unzip src="${dst_geotools}" dest="${tmp}" />
    <copy file="${tmp}/${geotools_prefix}/${gt_api.jar}" todir="${ext.dir}" />
    <copy file="${tmp}/${geotools_prefix}/${gt_main.jar}" todir="${ext.dir}" />
    <copy file="${tmp}/${geotools_prefix}/${gt_data.jar}" todir="${ext.dir}" />
    <copy file="${tmp}/${geotools_prefix}/${gt_coverage.jar}" todir="${ext.dir}" />
    <copy file="${tmp}/${geotools_prefix}/${gt_referencing.jar}" todir="${ext.dir}" />
    <copy file="${tmp}/${geotools_prefix}/${gt_shapefile.jar}" todir="${ext.dir}" />
    <copy file="${tmp}/${geotools_prefix}/${gt_render.jar}" todir="${ext.dir}" />
    <copy file="${tmp}/${geotools_prefix}/${gt_metadata.jar}" todir="${ext.dir}" />
    <copy file="${tmp}/${geotools_prefix}/${gt_opengis.jar}" todir="${ext.dir}" />
    <copy file="${tmp}/${geotools_prefix}/${jts.jar}" todir="${ext.dir}" />
    <!-- -->
    <get src="${src_commons_math}" dest="${dst_commons_math}" usetimestamp="yes" />
    <unzip src="${dst_commons_math}" dest="${tmp}" />
    <copy file="${tmp}/${commons_math_sub_prefix}/${commons_math_sub_prefix}.jar" todir="${ext.dir}" />
    <!-- -->
    <get src="${src_commons_validator}" dest="${dst_commons_validator}" usetimestamp="yes" />
    <unzip src="${dst_commons_validator}" dest="${tmp}" />
    <copy file="${tmp}/${commons_validator_sub_prefix}/${commons_validator_sub_prefix}.jar" todir="${ext.dir}" />
    <!-- -->
    <get src="${src_jdom}" dest="${dst_jdom}" usetimestamp="yes" />
    <unzip src="${dst_jdom}" dest="${tmp}" />
    <copy file="${tmp}/${jdom_prefix}.jar" todir="${ext.dir}" />
    <!-- -->
    <get src="${src_jyconsole}" dest="${dst_jyconsole}" usetimestamp="yes" />
    <unzip src="${dst_jyconsole}" dest="${tmp}" />
    <copy file="${tmp}/${jyconsole_prefix}/JyConsole.jar" todir="${ext.dir}" />
    <copy file="${tmp}/${jyconsole_prefix}/thirdpart/ArtTk/ArtTk.jar" todir="${ext.dir}" />
    <copy file="${tmp}/${jyconsole_prefix}/thirdpart/jython2.2/jython.jar" todir="${ext.dir}" />
    <!-- -->
    <get src="${src_jyni}" dest="${dst_jyni}" usetimestamp="yes" />
    <copy file="${dst_jyni}" todir="${ext.dir}" />
    <!-- -->
    <get src="${src_java_getopt}" dest="${dst_java_getopt}" usetimestamp="yes" />
    <copy file="${tmp}/${java_getopt}" todir="${ext.dir}" />
    <!-- -->
    <!--
    <get src="${src_jai}" dest="${dst_jai}" usetimestamp="yes" />
    <unzip src="${dst_jai}" dest="${tmp}" />
    -->
    <!-- -->
    <get src="${src_cdfjava}" dest="${dst_cdfjava}" usetimestamp="yes" />
    <copy file="${tmp}/${cdfjava}" todir="${ext.dir}" />
    <!-- -->
    <get src="${src_junit}" dest="${dst_junit}" usetimestamp="yes" />
    <copy file="${tmp}/${junit.jar}" todir="${ext.dir}" />
    <!-- -->
    <get src="${src_oai4j}" dest="${dst_oai4j}" usetimestamp="yes" />
    <!--    <copy file="${tmp}/${oai4j.jar}" todir="${ext.dir}" /> -->
    <get src="${src_jfxtras-agenda}" dest="${dst_jfxtras-agenda}" usetimestamp="yes" />
    <copy file="${dst_jfxtras-agenda}" todir="${ext.dir}" />    
    <get src="${src_jfxtras-common}" dest="${dst_jfxtras-common}" usetimestamp="yes" />
    <copy file="${dst_jfxtras-common}" todir="${ext.dir}" />    
    <get src="${src_jfxtras-controls}" dest="${dst_jfxtras-controls}" usetimestamp="yes" />
    <copy file="${dst_jfxtras-controls}" todir="${ext.dir}" />    
    <get src="${src_jfxtras-fxml}" dest="${dst_jfxtras-fxml}" usetimestamp="yes" />
    <copy file="${dst_jfxtras-fxml}" todir="${ext.dir}" />    
    <get src="${src_jfxtras-labs}" dest="${dst_jfxtras-labs}" usetimestamp="yes" />
    <copy file="${dst_jfxtras-labs}" todir="${ext.dir}" />    
    <get src="${src_jfxtras-test-support}" dest="${dst_jfxtras-test-support}" usetimestamp="yes" />
    <copy file="${dst_jfxtras-test-support}" todir="${ext.dir}" />    
    <get src="${src_jfxtras-window}" dest="${dst_jfxtras-window}" usetimestamp="yes" />
    <copy file="${dst_jfxtras-window}" todir="${ext.dir}" />    
    <!-- -->
    <get src="${src_testFx.jar}" dest="${dst_testFx.jar}" usetimestamp="yes" />
    <copy file="${dst_testFx.jar}" todir="${ext.dir}" />    
    <get src="${src_testFx.javadoc.jar}" dest="${dst_testFx.javadoc.jar}" usetimestamp="yes" />
    <copy file="${dst_testFx.javadoc.jar}" todir="${ext.dir}" />    
    <get src="${src_testFx.sources.jar}" dest="${dst_testFx.sources.jar}" usetimestamp="yes" />
    <copy file="${dst_testFx.sources.jar}" todir="${ext.dir}" />    
    <!-- -->
    <get src="${src_guava.jar}" dest="${dst_guava.jar}" usetimestamp="yes" />
    <copy file="${dst_guava.jar}" todir="${ext.dir}" />    
    <!-- -->
    <get src="${src_hamcrest.jar}" dest="${dst_hamcrest.jar}" usetimestamp="yes" />
    <copy file="${dst_hamcrest.jar}" todir="${ext.dir}" />    
    <!-- -->
    <get src="${src_undofx.jar}" dest="${dst_undofx.jar}" usetimestamp="yes" />
    <copy file="${dst_undofx.jar}" todir="${ext.dir}" />    
    <get src="${src_undofx.javadoc.jar}" dest="${dst_undofx.javadoc.jar}" usetimestamp="yes" />
    <copy file="${dst_undofx.javadoc.jar}" todir="${ext.dir}" />    
    <get src="${src_undofx.sources.jar}" dest="${dst_undofx.sources.jar}" usetimestamp="yes" />
    <copy file="${dst_undofx.sources.jar}" todir="${ext.dir}" />    
    <!-- -->
    <get src="${src_lombok.jar}" dest="${dst_lombok.jar}" usetimestamp="yes" />
    <copy file="${dst_lombok.jar}" todir="${ext.dir}" />
    <!-- -->
    <get src="${src_felix}" dest="${dst_felix}" usetimestamp="yes" />
    <unzip src="${dst_felix}" dest="${tmp}" />
    <!-- -->
<!--
    <copy file="${dst_felix}" dest="${ext.dir}" />
-->
    <!-- -->
    <get src="${src_javacv}" dest="${dst_javacv}" usetimestamp="yes" />
    <unzip src="${dst_javacv}" dest="${tmp}" />
    <copy file="${tmp}/javacv-bin/javacv.jar" todir="${ext.dir}" />    
    <copy file="${tmp}/javacv-bin/javacpp.jar" todir="${ext.dir}" />    
    <copy file="${tmp}/javacv-bin/opencv.jar" todir="${ext.dir}" />    
    <copy file="${tmp}/javacv-bin/opencv-linux-x86_64.jar" todir="${ext.dir}" />    
    <copy file="${tmp}/javacv-bin/opencv-linux-x86.jar" todir="${ext.dir}" />    
    <copy file="${tmp}/javacv-bin/opencv-macosx-x86_64.jar" todir="${ext.dir}" />    
    <copy file="${tmp}/javacv-bin/opencv-windows-x86_64.jar" todir="${ext.dir}" />    
    <copy file="${tmp}/javacv-bin/opencv-windows-x86.jar" todir="${ext.dir}" />    <copy file="${tmp}/javacv-bin/ffmpeg.jar" todir="${ext.dir}" />    
    <copy file="${tmp}/javacv-bin/ffmpeg-linux-x86_64.jar" todir="${ext.dir}" />    
    <copy file="${tmp}/javacv-bin/ffmpeg-linux-x86.jar" todir="${ext.dir}" />    
    <copy file="${tmp}/javacv-bin/ffmpeg-macosx-x86_64.jar" todir="${ext.dir}" />    
    <copy file="${tmp}/javacv-bin/ffmpeg-windows-x86_64.jar" todir="${ext.dir}" />    
    <copy file="${tmp}/javacv-bin/ffmpeg-windows-x86.jar" todir="${ext.dir}" />    <!-- -->
    <get src="${src_fits}" dest="${dst_fits}" usetimestamp="yes" />
    <copy file="${dst_fits}" todir="${ext.dir}" />    
    <!-- -->
    <!--
    <get src="${src_hdf5}" dest="${dst_hdf5}" usetimestamp="yes" />
    <exec executable="tar">
      <arg line="xjf ${dst_hdf5} - -directory=${tmp}" />
    </exec>
    <exec executable="./configure" dir="${tmp}/${hdf4_prefix}">
    </exec>
    <exec executable="make" dir="${tmp}/${hdf4_prefix}">
    </exec>
    -->
    <!-- -->
    <!--
    <get src="${src_hdf4}" dest="${dst_hdf4}" usetimestamp="yes" />
    <exec executable="tar">
      <arg line="xjf ${dst_hdf4} - -directory=${tmp}" />
    </exec>
    <exec executable="./configure" dir="${tmp}/${hdf4_prefix}">
    </exec>
    <exec executable="make" dir="${tmp}/${hdf4_prefix}">
    </exec>
    -->
    <!-- -->
    <!--
    <get src="${src_hdf-java_linux}" dest="${dst_hdf-java_linux}" usetimestamp="yes" />
    <exec executable="tar">
      <arg line="xvzf ${dst_hdf-java_linux} - -directory=${tmp}" />
    </exec>
    -->
    <!-- -->
    <!--
    <get src="${src_hdf-java_macosx}" dest="${dst_hdf-java_macosx}" usetimestamp="yes" />
    <exec executable="tar">
      <arg line="xvzf ${dst_hdf-java_macosx} - -directory=${tmp}" />
    </exec>
    -->
    <!-- -->
    <!--
    <get src="${src_hdf-java_win32}" dest="${dst_hdf-java_win32}" usetimestamp="yes" />
    <unzip src="${dst_hdf-java_win32}" dest="${tmp}" />
    -->
    <!-- -->
    <!--
    <get src="${src_hdf-java_win64}" dest="${dst_hdf-java_win64}" usetimestamp="yes" />
    <unzip src="${dst_hdf-java_win64}" dest="${tmp}" />
    -->
    <!-- -->
    <get src="${src_jeditor}" dest="${dst_jeditor}" usetimestamp="yes" />
    <unzip src="${dst_jeditor}" dest="${tmp}" />
    <copy file="${tmp}/jEditorGPL.jar" todir="${ext.dir}" />    
    <!-- couldn't execute get task behind the http proxy to ftp server -->
<!--
    <ftp server="ftp.unidata.ucar.edu" binary="yes" action="get">
      <fileset dir="/pub/netcdf-java/v4.3">
	<include name="netcdfAll-4.3.jar" />
      </fileset>
    </ftp>
-->
<antcall target="netcdf_without_proxy" />
<antcall target="netcdf_with_proxy" />
<!--
    <exec executable="curl" dir="${tmp}">
      <arg line="-O ${src_netcdf} -o ${netcdf} - -proxy ${http.proxyHost}:${http.proxyPort}" />
    </exec>
    <copy file="${dst_netcdf}" todir="${ext.dir}" />
-->

    <!-- -->
    <get src="${src_groovy}" dest="${dst_groovy}" usetimestamp="yes" />
    <unzip src="${dst_groovy}" dest="${tmp}" />
    <copy file="${tmp}/groovy-${groovy_version}/lib/groovy-${groovy_version}.jar" todir="${ext.dir}" />
    <!-- -->
    <get src="${src_scala}" dest="${dst_scala}" usetimestamp="yes" />
    <untar src="${dst_scala}" dest="${tmp}" compression="gzip" />
    <copy file="${tmp}/${scala_prefix}/lib/scala-library.jar" todir="${ext.dir}" />
    <!-- -->
    <get src="${src_jrubyComplete}" dest="${dst_jrubyComplete}" usetimestamp="yes" />
    <copy file="${dst_jrubyComplete}" todir="${ext.dir}" />
    <!--
    <unzip src="${dst_jruby}" dest="${tmp}" />
    <exec executable="ant" dir="${tmp}/jruby-${jruby_version}">
      <arg line="jar jar-console" />
    </exec>
    <copy file="${tmp}/jruby-${jruby_version}/lib/jruby.jar" todir="${ext.dir}" />    
    <copy file="${tmp}/jruby-${jruby_version}/lib/jruby-console.jar" todir="${ext.dir}" />
    -->
    <!-- -->
    <get src="${src_readline}" dest="${dst_readline}" usetimestamp="yes" />
    <copy file="${dst_readline}" todir="${ext.dir}" />
    <get src="${src_jline}" dest="${dst_jline}" usetimestamp="yes" />
    <copy file="${dst_jline}" todir="${ext.dir}" />
  </target>

  <target name="netcdf_with_proxy" if="${http.proxyHost}" >
    <exec executable="curl" dir="${tmp}">
      <arg line="-O ${src_netcdf} -o ${netcdf} --proxy ${http.proxyHost}:${http.proxyPort}" />
    </exec>
    <copy file="${dst_netcdf}" todir="${ext.dir}" />
  </target>

  <target name="netcdf_without_proxy" unless="${http.proxyHost}" >
    <exec executable="curl" dir="${tmp}">
      <arg line="-O ${src_netcdf} -o ${netcdf}" />
    </exec>
    <copy file="${dst_netcdf}" todir="${ext.dir}" />
  </target>

  <target name="final_message" description="Display final message">
    <echo message="###&#x0A;###&#x0A;&#x0A;Please type&#x0A;&#x0A;source ~/.bash_profile&#x0A;&#x0A;###&#x0A;###&#x0A;" />
  </target>

  <condition property="have.resources.tmp.maven">
    <available file="${tmp}/${maven}" />
  </condition>
  <condition property="have.resources.tmp">
    <available file="${tmp}" />
  </condition>
  <target name="mkdir.tmp" description="Make dir ${tmp}" unless="${have.resources.tmp}">
    <mkdir dir="${tmp}" />
  </target>

  <target name="maven" description="Install Apache Maven">
    <antcall target="mkdir.tmp" />

    <echo message='### for MAVEN&#10;' file="${env_set_file}" append="yes" />
    <echo message='export MAVEN_HOME=${maven_home}&#10;' file="${env_set_file}" append="yes" />
    <echo message='export PATH=${MAVEN_HOME}/bin:${PATH}&#10;' file="${env_set_file}" append="yes" />
    <get src="${src_maven}" dest="${dst_maven}" usetimestamp="true" />
    <unzip src="${dst_maven}" dest="${install_dir}" />
    <chmod file="${install_dir}/${maven_prefix}/bin/mvn" perm="gou+x" />
  </target>

  <target name="map">
    <get src="${src_ne}" dest="${dst_ne}" usetimestamp="yes" />
    <!-- To stay away to use untar task because untar task for ant 1.7.1 is buggy. -->
    <exec executable="unzip" dir="${tmp}">
      <arg value="${dst_ne}" />
    </exec>
  </target>

  <target name="switch_jdk" description="Switch JDK">
    <exec executable="bash">
      <arg value="-c" />
      <arg value="echo '2' | alternatives --config java" />
    </exec>
  </target>

  <target name="javadoc" description="Create doc">
    <javadoc destdir="${javadoc.dir}" >
      <sourcepath path="workspace/Aplot/src" />
      <sourcepath path="workspace/Iplot/src" />
      <sourcepath path="workspace/JnlpGenerator/src" />
      <sourcepath path="workspace/JudasFX/src" />
      <sourcepath path="workspace/MetadataHandler/src" />
      <sourcepath path="workspace/Mplot/src" />
      <sourcepath path="workspace/Plugins/src" />
      <sourcepath path="workspace/Tplot/src" />
      <sourcepath path="workspace/XYplot/src" />
    </javadoc>
  </target>

  <target name="naturalearth" description="Install naturalearth">
    <get src="${src_ne_coastline_low}" dest="${dst_ne_coastline_low}" usetimestamp="yes" />
    <unzip src="${dst_ne_coastline_low}" dest="${tmp}" />
    <get src="${src_ne_land_low}" dest="${dst_ne_land_low}" usetimestamp="yes" />
    <unzip src="${dst_ne_land_low}" dest="${tmp}" />
    <get src="${src_ne_land_ocean}" dest="${dst_ne_land_ocean}" usetimestamp="yes" />
    <unzip src="${dst_ne_land_ocean}" dest="${tmp}" />
    <get src="${src_ne_land_rivers_lake_centerlines}" dest="${dst_ne_land_rivers_lake_centerlines}" usetimestamp="yes" />
    <unzip src="${dst_ne_land_rivers_lake_centerlines}" dest="${tmp}" />
  </target>

</project>
